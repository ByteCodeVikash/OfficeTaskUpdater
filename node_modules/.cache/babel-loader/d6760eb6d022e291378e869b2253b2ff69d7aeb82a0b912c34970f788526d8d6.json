{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vikash\\\\OneDrive\\\\Desktop\\\\task_manger\\\\my-react-app\\\\src\\\\Tasks.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Tasks.css';\n\n// Assuming you have a more complex state with more attributes\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialTasks = [\n  // ... your initial tasks\n];\nconst Task = ({\n  task,\n  toggleComplete\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: `task ${task.status}`,\n  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"checkbox-container\",\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      checked: task.isCompleted,\n      onChange: () => toggleComplete(task.id)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-name\",\n    children: task.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `status ${task.status}`,\n    children: task.status\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"due-date\",\n    children: task.dueDate\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"remaining\",\n    children: task.remaining\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 10,\n  columnNumber: 3\n}, this);\n_c = Task;\nconst Tasks = () => {\n  _s();\n  const [tasks, setTasks] = useState(initialTasks);\n  const toggleComplete = taskId => {\n    setTasks(tasks.map(task => task.id === taskId ? {\n      ...task,\n      isCompleted: !task.isCompleted\n    } : task));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tasks-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"High Priority\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-list\",\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(Task, {\n        task: task,\n        toggleComplete: toggleComplete\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(Tasks, \"SvIK8d5WT9y/c+LCOG3LNPDmSmQ=\");\n_c2 = Tasks;\nexport default Tasks;\nvar _c, _c2;\n$RefreshReg$(_c, \"Task\");\n$RefreshReg$(_c2, \"Tasks\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","initialTasks","Task","task","toggleComplete","className","status","children","type","checked","isCompleted","onChange","id","fileName","_jsxFileName","lineNumber","columnNumber","name","dueDate","remaining","_c","Tasks","_s","tasks","setTasks","taskId","map","_c2","$RefreshReg$"],"sources":["C:/Users/Vikash/OneDrive/Desktop/task_manger/my-react-app/src/Tasks.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './Tasks.css';\r\n\r\n// Assuming you have a more complex state with more attributes\r\nconst initialTasks = [\r\n  // ... your initial tasks\r\n];\r\n\r\nconst Task = ({ task, toggleComplete }) => (\r\n  <div className={`task ${task.status}`}>\r\n    <div className=\"checkbox-container\">\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={task.isCompleted}\r\n        onChange={() => toggleComplete(task.id)}\r\n      />\r\n    </div>\r\n    <div className=\"task-name\">{task.name}</div>\r\n    <div className={`status ${task.status}`}>{task.status}</div>\r\n    <div className=\"due-date\">{task.dueDate}</div>\r\n    <div className=\"remaining\">{task.remaining}</div>\r\n  </div>\r\n);\r\n\r\nconst Tasks = () => {\r\n  const [tasks, setTasks] = useState(initialTasks);\r\n\r\n  const toggleComplete = (taskId) => {\r\n    setTasks(tasks.map(task => (\r\n      task.id === taskId ? { ...task, isCompleted: !task.isCompleted } : task\r\n    )));\r\n  };\r\n\r\n  return (\r\n    <div className=\"tasks-container\">\r\n      <h1>High Priority</h1>\r\n      <div className=\"task-list\">\r\n        {tasks.map(task => (\r\n          <Task key={task.id} task={task} toggleComplete={toggleComplete} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tasks;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}