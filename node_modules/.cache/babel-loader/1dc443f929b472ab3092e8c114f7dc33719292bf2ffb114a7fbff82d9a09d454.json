{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vikash\\\\OneDrive\\\\Desktop\\\\task_manger\\\\my-react-app\\\\src\\\\Teams.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Teams.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Teams = () => {\n  _s();\n  const [messages, setMessages] = useState([]); // Initially empty\n  const [files, setFiles] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  useEffect(() => {\n    // Fetch messages from the server when the component mounts\n    fetch('http://localhost:3001/getMessages').then(response => response.json()).then(data => {\n      setMessages(data); // Update state with fetched messages\n    }).catch(error => {\n      console.error('Error fetching messages:', error);\n    });\n  }, []);\n  const handleSend = () => {\n    if (newMessage.trim() !== '' || files.length > 0) {\n      // Assume a unique ID can be generated for the new message\n      const nextId = messages.length > 0 ? Math.max(...messages.map(m => m.id)) + 1 : 1;\n      let fileInformation = files.map(file => ({\n        name: file.name,\n        size: file.size,\n        url: file.url\n      }));\n      const messageData = {\n        id: nextId,\n        author: 'You',\n        content: newMessage,\n        files: fileInformation,\n        // Include file information as an array\n        type: 'sent'\n      };\n\n      // Update the local state to include the new message\n      setMessages(prevMessages => [...prevMessages, messageData]);\n      setNewMessage('');\n      setFiles([]);\n\n      // Send the message data to the server\n      fetch('http://localhost:3001/storeMessage', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(messageData)\n      }).then(response => response.json()).then(data => console.log('Message stored:', data)).catch(error => console.error('Failed to store message:', error));\n    }\n  };\n  const handleFileUpload = event => {\n    const uploadedFiles = event.target.files;\n    const fileList = Array.from(uploadedFiles).map(file => ({\n      name: file.name,\n      size: file.size,\n      url: URL.createObjectURL(file) // Create a URL for the file\n    }));\n    setFiles(fileList); // Update the files state\n  };\n  const handleReply = author => {\n    setNewMessage(`Replying to ${author}: `);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type something ...\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        onKeyPress: e => e.key === 'Enter' && handleSend() // Here we use handleSend\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"send-btn\",\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"fileUpload\",\n      type: \"file\",\n      multiple: true,\n      onChange: handleFileUpload // Here we use handleFileUpload\n      ,\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab\",\n      onClick: () => document.getElementById('fileUpload').click(),\n      children: \"Files\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `message ${message.type}`,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"reply-btn\",\n        onClick: () => handleReply(message.author),\n        children: \"Reply\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), \" \"]\n    }, message.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(Teams, \"pcNPz0Wd2NrLnpd9w9wlt8/PKaw=\");\n_c = Teams;\nexport default Teams;\nvar _c;\n$RefreshReg$(_c, \"Teams\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Teams","_s","messages","setMessages","files","setFiles","newMessage","setNewMessage","fetch","then","response","json","data","catch","error","console","handleSend","trim","length","nextId","Math","max","map","m","id","fileInformation","file","name","size","url","messageData","author","content","type","prevMessages","method","headers","body","JSON","stringify","log","handleFileUpload","event","uploadedFiles","target","fileList","Array","from","URL","createObjectURL","handleReply","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","onKeyPress","key","onClick","multiple","style","display","document","getElementById","click","message","_c","$RefreshReg$"],"sources":["C:/Users/Vikash/OneDrive/Desktop/task_manger/my-react-app/src/Teams.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Teams.css';\r\n\r\nconst Teams = () => {\r\n  const [messages, setMessages] = useState([]); // Initially empty\r\n  const [files, setFiles] = useState([]);\r\n  const [newMessage, setNewMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    // Fetch messages from the server when the component mounts\r\n    fetch('http://localhost:3001/getMessages')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setMessages(data); // Update state with fetched messages\r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching messages:', error);\r\n      });\r\n  }, []);\r\n\r\n  const handleSend = () => {\r\n    if (newMessage.trim() !== '' || files.length > 0) {\r\n      // Assume a unique ID can be generated for the new message\r\n      const nextId = messages.length > 0 ? Math.max(...messages.map(m => m.id)) + 1 : 1;\r\n      let fileInformation = files.map(file => ({\r\n        name: file.name,\r\n        size: file.size,\r\n        url: file.url,\r\n      }));\r\n\r\n      const messageData = {\r\n        id: nextId,\r\n        author: 'You',\r\n        content: newMessage,\r\n        files: fileInformation, // Include file information as an array\r\n        type: 'sent',\r\n      };\r\n\r\n      // Update the local state to include the new message\r\n      setMessages(prevMessages => [...prevMessages, messageData]);\r\n      setNewMessage('');\r\n      setFiles([]);\r\n\r\n      // Send the message data to the server\r\n      fetch('http://localhost:3001/storeMessage', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(messageData),\r\n      })\r\n      .then(response => response.json())\r\n      .then(data => console.log('Message stored:', data))\r\n      .catch(error => console.error('Failed to store message:', error));\r\n    }\r\n  };\r\n\r\n  const handleFileUpload = (event) => {\r\n    const uploadedFiles = event.target.files;\r\n    const fileList = Array.from(uploadedFiles).map(file => ({\r\n      name: file.name,\r\n      size: file.size,\r\n      url: URL.createObjectURL(file), // Create a URL for the file\r\n    }));\r\n    setFiles(fileList); // Update the files state\r\n  };\r\n\r\n  const handleReply = (author) => {\r\n    setNewMessage(`Replying to ${author}: `);\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      {/* ...other components... */}\r\n  \r\n      {/* Chat messages display */}\r\n      <div className=\"chat-messages\">\r\n        {/* Messages are mapped here */}\r\n      </div>\r\n  \r\n      {/* Chat input */}\r\n      <div className=\"chat-input\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Type something ...\"\r\n          value={newMessage}\r\n          onChange={(e) => setNewMessage(e.target.value)}\r\n          onKeyPress={(e) => e.key === 'Enter' && handleSend()} // Here we use handleSend\r\n        />\r\n        <button className=\"send-btn\" onClick={handleSend}>Send</button> {/* Here we use handleSend */}\r\n      </div>\r\n  \r\n      {/* File input */}\r\n      <input\r\n        id=\"fileUpload\"\r\n        type=\"file\"\r\n        multiple\r\n        onChange={handleFileUpload} // Here we use handleFileUpload\r\n        style={{ display: 'none' }}\r\n      />\r\n      <div className=\"tab\" onClick={() => document.getElementById('fileUpload').click()}>Files</div>\r\n  \r\n      {/* Reply button would be part of each message, ensure this is within your map function */}\r\n      {messages.map((message) => (\r\n        <div key={message.id} className={`message ${message.type}`}>\r\n          {/* ... other message code ... */}\r\n          <button className=\"reply-btn\" onClick={() => handleReply(message.author)}>Reply</button> {/* Here we use handleReply */}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n  \r\n\r\nexport default Teams;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}