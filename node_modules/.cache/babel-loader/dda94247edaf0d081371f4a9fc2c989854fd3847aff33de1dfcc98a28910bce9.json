{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vikash\\\\OneDrive\\\\Desktop\\\\task_manger\\\\my-react-app\\\\src\\\\Teams.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Teams.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Teams = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  useEffect(() => {\n    // Fetch existing messages from the server when the component mounts\n    fetch('http://localhost:3001/getMessages').then(response => response.json()).then(data => {\n      setMessages(data); // Update state with fetched messages\n    }).catch(error => {\n      console.error('Error fetching messages:', error);\n    });\n  }, []);\n  const handleSend = () => {\n    if (!newMessage.trim()) return; // Don't send empty messages\n\n    const messageData = {\n      author: 'You',\n      content: newMessage.trim(),\n      type: 'sent' // Example type, adjust as needed\n    };\n\n    // Optimistically add the message to the UI\n    setMessages(prevMessages => [...prevMessages, messageData]);\n    setNewMessage(''); // Clear input field\n\n    // Send the message data to the server\n    fetch('http://localhost:3001/storeMessage', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(messageData)\n    }).then(response => response.json()).then(() => {\n      // Handle success\n    }).catch(error => {\n      console.error('Failed to store message:', error);\n      // Optionally remove the message from UI or indicate an error\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.type}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"initials\",\n          children: message.author.split(' ').map(name => name[0]).join('')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text\",\n          children: message.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type something...\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        onKeyPress: e => e.key === 'Enter' && handleSend()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(Teams, \"ppYy//Iy9fHF0/R/fKleZlFUFyc=\");\n_c = Teams;\nexport default Teams;\nvar _c;\n$RefreshReg$(_c, \"Teams\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Teams","_s","messages","setMessages","newMessage","setNewMessage","fetch","then","response","json","data","catch","error","console","handleSend","trim","messageData","author","content","type","prevMessages","method","headers","body","JSON","stringify","className","children","map","message","index","split","name","join","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","onKeyPress","key","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Vikash/OneDrive/Desktop/task_manger/my-react-app/src/Teams.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Teams.css';\r\n\r\nconst Teams = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    // Fetch existing messages from the server when the component mounts\r\n    fetch('http://localhost:3001/getMessages')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setMessages(data); // Update state with fetched messages\r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching messages:', error);\r\n      });\r\n  }, []);\r\n\r\n  const handleSend = () => {\r\n    if (!newMessage.trim()) return; // Don't send empty messages\r\n\r\n    const messageData = {\r\n      author: 'You',\r\n      content: newMessage.trim(),\r\n      type: 'sent', // Example type, adjust as needed\r\n    };\r\n\r\n    // Optimistically add the message to the UI\r\n    setMessages(prevMessages => [...prevMessages, messageData]);\r\n    setNewMessage(''); // Clear input field\r\n\r\n    // Send the message data to the server\r\n    fetch('http://localhost:3001/storeMessage', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(messageData),\r\n    })\r\n    .then(response => response.json())\r\n    .then(() => {\r\n      // Handle success\r\n    })\r\n    .catch(error => {\r\n      console.error('Failed to store message:', error);\r\n      // Optionally remove the message from UI or indicate an error\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <div className=\"chat-messages\">\r\n        {messages.map((message, index) => (\r\n          <div key={index} className={`message ${message.type}`}>\r\n            <div className=\"initials\">\r\n              {message.author.split(' ').map(name => name[0]).join('')}\r\n            </div>\r\n            <div className=\"text\">{message.content}</div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"chat-input\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Type something...\"\r\n          value={newMessage}\r\n          onChange={(e) => setNewMessage(e.target.value)}\r\n          onKeyPress={(e) => e.key === 'Enter' && handleSend()}\r\n        />\r\n        <button onClick={handleSend}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Teams;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}